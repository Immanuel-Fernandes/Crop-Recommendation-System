# Import required libraries
from fastapi import FastAPI
from pydantic import BaseModel
from fastapi.middleware.cors import CORSMiddleware
import numpy as np
import pickle

# Initialize FastAPI app
app = FastAPI()

# Add CORS middleware to handle cross-origin requests
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # Allows all origins
    allow_credentials=True,
    allow_methods=["*"],  # Allows all methods
    allow_headers=["*"],  # Allows all headers
)

# Load the model and scalers
with open('model.pkl', 'rb') as f:
    model = pickle.load(f)

with open('standscaler.pkl', 'rb') as f:
    sc = pickle.load(f)

with open('minmaxscaler.pkl', 'rb') as f:
    mx = pickle.load(f)

# Crop dictionary for mapping model predictions to crop names
crop_dict = {
    1: "Rice", 2: "Maize", 3: "Jute", 4: "Cotton", 5: "Coconut", 6: "Papaya", 7: "Orange",
    8: "Apple", 9: "Muskmelon", 10: "Watermelon", 11: "Grapes", 12: "Mango", 13: "Banana",
    14: "Pomegranate", 15: "Lentil", 16: "Blackgram", 17: "Mungbean", 18: "Mothbeans",
    19: "Pigeonpeas", 20: "Kidneybeans", 21: "Chickpea", 22: "Coffee"
}

# Define the input data model
class CropRecommendationInput(BaseModel):
    N: int
    P: int
    K: int
    temperature: float
    humidity: float
    ph: float
    rainfall: float

# Define the prediction endpoint
@app.post("/predict/")
async def predict_crop(data: CropRecommendationInput):
    feature_list = [data.N, data.P, data.K, data.temperature, data.humidity, data.ph, data.rainfall]
    single_pred = np.array(feature_list).reshape(1, -1)
    
    # Apply transformations and make predictions
    mx_features = mx.transform(single_pred)
    sc_mx_features = sc.transform(mx_features)
    prediction = model.predict(sc_mx_features)
    
    # Map prediction to crop name
    if prediction[0] in crop_dict:
        crop = crop_dict[prediction[0]]
        return {"crop": crop}
    else:
        return {"error": "Could not determine the best crop with the provided data."}

# Run the FastAPI app using uvicorn
if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
